#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        delete {
            bindings = <&kp DELETE>;
            key-positions = <29 28>;
            layers = <0>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <8 9>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &kp Q  &kp W  &kp E     &kp R     &kp T      &kp Y            &kp U    &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D     &kp F     &kp G      &kp H            &kp J    &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C     &kp V     &lt 1 B    &kp N            &kp M    &kp COMMA  &kp DOT  &kp FSLH
                &mkp MB2  &mkp MB1  &mo 1      &lt 2 BACKSPACE  &kp RET
            >;
        };

        Lower {
            label = "Lower";
            bindings = <
  &kp F1  &kp F2   &kp F3   &kp F4   &trans    &kp N7  &kp N8  &kp N9  &kp N0  &trans
  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &kp N4  &kp N5  &kp N6  &none   &trans
  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &kp N1  &kp N2  &kp N3  &trans  &trans
                   &trans   &trans   &trans    &trans  &trans
            >;
        };

        Raise {
            label = "Raise";
            bindings = <
  &kp EXCL      &kp AT       &kp HASH    &kp DLLR   &kp PRCNT       &kp CARET  &kp AMPS     &kp KP_MULTIPLY  &kp LPAR  &kp RPAR
  &bt BT_CLR    &bt BT_PRV   &bt BT_NXT  &trans     &to 3           &kp UNDER  &kp EQUAL    &kp LBKT         &kp RBKT  &kp BSLH
  &out OUT_TOG  &bootloader  &trans      &trans     &trans          &kp MINUS  &kp PLUS     &kp LBRC         &kp RBRC  &kp PIPE
                             &kp LGUI    &kp SPACE  &kp LEFT_ALT    &trans     &bootloader
            >;
        };

        Game {
            label = "Game";
            bindings = <
  &kp EXCL      &kp AT       &kp HASH    &kp DLLR   &kp PRCNT       &kp CARET  &kp AMPS     &kp KP_MULTIPLY  &kp LPAR  &kp RPAR
  &bt BT_CLR    &bt BT_PRV   &bt BT_NXT  &trans     &to 3           &kp UNDER  &kp EQUAL    &kp LBKT         &kp RBKT  &kp BSLH
  &out OUT_TOG  &bootloader  &trans      &trans     &trans          &kp MINUS  &kp PLUS     &kp LBRC         &kp RBRC  &kp PIPE
                             &kp LGUI    &kp SPACE  &kp LEFT_ALT    &trans     &bootloader
            >;
        };

        Game_++ {
            label = "Game ++";
            bindings = <
  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp LC(RA(Y))  &kp LC(RA(U))  &kp LC(RA(I))  &kp LC(RA(H))  &kp LC(RA(J))
  &kp L         &kp O         &kp Y         &kp K         &kp G           &trans         &trans         &trans         &trans         &trans
  &none         &to 0         &none         &kp NUMBER_6  &kp NUMBER_7    &trans         &trans         &trans         &trans         &trans
                              &kp J         &kp I         &kp M           &trans         &trans
            >;
        };

        Mouse {
            bindings = <
  &trans     &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans
  &trans     &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans
  &mkp MCLK  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &mkp LCLK
                     &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
